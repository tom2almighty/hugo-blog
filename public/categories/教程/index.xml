<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on Tom&#39;s Blog</title>
    <link>http://localhost:1313/categories/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on Tom&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Tom Almighty</copyright>
    <lastBuildDate>Wed, 31 Jul 2024 11:01:43 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSS一站式指南</title>
      <link>http://localhost:1313/posts/rss-tutorial/</link>
      <pubDate>Wed, 31 Jul 2024 11:01:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/rss-tutorial/</guid>
      <description>前言 Google Reader 在 2013 年的下线似乎标志着 RSS 黄金时代的结束。在那之后，虽然陆续出现过很多替代品，但 RSS 的地位已经被无限刷新的信息流、算法推荐等新技术逐渐取代了(来自少数派文章)。&#xA;虽然 RSS 服务对用户要求较高，逐渐被各种各样的平台替代，但其信息来源灵活，对有一定动手能力的用户的来说利大于弊。因此本文记录自建 RSS 源获取、管理工具的流程，免得后续忘记需要重新翻找文档。&#xA;RSSHub 首先是 RSS 订阅获取，这里推荐著名的 RSSHub，GitHub 地址如下：&#xA;{% ghcard DIYgod/RSSHub, theme=onedark %}&#xA;详细的说明可以在项目文档找到，下面是服务器部署的方式：&#xA;version: &amp;#34;3.9&amp;#34; services: rsshub: # two ways to enable puppeteer: # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled # * (consumes more disk space and memory) leave everything unchanged image: diygod/rsshub restart: always ports: - 1200:1200 environment: NODE_ENV: production CACHE_TYPE: redis REDIS_URL: redis://redis:6379/ PUPPETEER_WS_ENDPOINT: ws://browserless:3000 # marked # ACCESS_KEY: password # 访问限制密钥 depends_on: - redis - browserless # marked browserless: # marked image: browserless/chrome # marked restart: always # marked ulimits: # marked core: # marked hard: 0 # marked soft: 0 # marked redis: image: redis:alpine restart: always volumes: - redis-data:/data volumes: redis-data: null networks: {} 个人建议在配置中写入访问限制设置，以免别人盗用你的地址，将 ACCESS_KEY 后替换为自己的密码即可。</description>
    </item>
    <item>
      <title>Stirling-PDF：强大的PDF工具箱</title>
      <link>http://localhost:1313/posts/stirling-pdf/</link>
      <pubDate>Thu, 09 May 2024 16:36:57 +0000</pubDate>
      <guid>http://localhost:1313/posts/stirling-pdf/</guid>
      <description>前言 通常我们需要处理一些 PDF 文档，使用时再寻找工具多有不便，不妨自己部署一个工具箱。&#xA;Stirling-PDF 是一个使用 Docker 部署的本地托管的、基于 Web 的 PDF 操作工具，支持多种语言它使您能够对 PDF 文件进行各种操作，包括分割、合并、转换、重组、添加图像、旋转、压缩等。这个本地托管的 Web 应用程序已发展为包含一组全面的功能，可满足您的所有 PDF 要求。&#xA;项目功能强大，详细的 Feature 可查看项目地址：&#xA;{% ghcard Stirling-Tools/Stirling-PDF, theme=onedark%}&#xA;本站预览地址如下：&#xA;{% link Stirling-PDF, https://pdf.grew.cc, /img/link.png %}&#xA;部署 版本差异 Stirling PDF 有两个不同的版本：完整版和超精简版，二者相差 400MB 左右，版本区别如下：&#xA;Technology Ultra-Lite Full Java ✔️ ✔️ JavaScript ✔️ ✔️ Libre ✔️ Python ✔️ OpenCV ✔️ OCRmyPDF ✔️ Operation Ultra-Lite Full add-page-numbers ✔️ ✔️ add-password ✔️ ✔️ add-image ✔️ ✔️ add-watermark ✔️ ✔️ adjust-contrast ✔️ ✔️ auto-split-pdf ✔️ ✔️ auto-redact ✔️ ✔️ auto-rename ✔️ ✔️ cert-sign ✔️ ✔️ crop ✔️ ✔️ change-metadata ✔️ ✔️ change-permissions ✔️ ✔️ compare ✔️ ✔️ extract-page ✔️ ✔️ extract-images ✔️ ✔️ flatten ✔️ ✔️ get-info-on-pdf ✔️ ✔️ img-to-pdf ✔️ ✔️ markdown-to-pdf ✔️ ✔️ merge-pdfs ✔️ ✔️ multi-page-layout ✔️ ✔️ overlay-pdf ✔️ ✔️ pdf-organizer ✔️ ✔️ pdf-to-csv ✔️ ✔️ pdf-to-img ✔️ ✔️ pdf-to-single-page ✔️ ✔️ remove-pages ✔️ ✔️ remove-password ✔️ ✔️ rotate-pdf ✔️ ✔️ sanitize-pdf ✔️ ✔️ scale-pages ✔️ ✔️ sign ✔️ ✔️ show-javascript ✔️ ✔️ split-by-size-or-count ✔️ ✔️ split-pdf-by-sections ✔️ ✔️ split-pdfs ✔️ ✔️ compress-pdf ✔️ extract-image-scans ✔️ ocr-pdf ✔️ pdf-to-pdfa ✔️ remove-blanks ✔️ Docker 部署 可以使用 docker run 命令运行，如下：</description>
    </item>
    <item>
      <title>Dockge：面向堆栈的docker-compose文件管理器</title>
      <link>http://localhost:1313/posts/dockge/</link>
      <pubDate>Thu, 09 May 2024 11:57:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/dockge/</guid>
      <description>前言 目前习惯使用 Docker 自建应用，而 compose 更是十分方便，本次使用的 dockge 是一个精美的、易于使用的、响应式的面向堆栈的自托管 docker-compose.yaml 管理器，项目地址如下：&#xA;{% ghcard louislam/dockge, theme=onedark%}&#xA;项目特点如下：&#xA;可以在面板方便的启动、编辑、更新、停止、重启、删除项目 交互式编辑 compose 文件 方便地进入项目终端 将 docker run 命令转换为 compose 文件 项目如图：&#xA;安装 以下使用的是项目推荐的命令，命令会在 /opt 目录下建立 /dockge 和 /stacks 目录，其中 /dockge 下为 Dockge 映射的文件夹， /stacks 为 Dockge 创建的项目，方便管理。&#xA;mkdir -p /opt/stacks /opt/dockge cd /opt/dockge curl &amp;#34;https://dockge.kuma.pet/compose.yaml?port=5001&amp;amp;stacksPath=%2Fopt%2Fstacks&amp;#34; --output compose.yaml docker compose up -d # V1版本或Podman启动命令 docker-compose up -d {% note info flat %} 如果想要更改端口以及安装文件夹，可以在官网手动下载 docker-compose 文件，官网可以在 UI 修改并直接下载。 {% endnote %}</description>
    </item>
    <item>
      <title>自建navidrome音乐服务</title>
      <link>http://localhost:1313/posts/navidrome/</link>
      <pubDate>Sat, 04 May 2024 10:28:07 +0000</pubDate>
      <guid>http://localhost:1313/posts/navidrome/</guid>
      <description>前言 最开始用网易云音乐，但很多歌曲没了版权，后来用了 Apple Music 学生会员，之后一直在使用 Spotify，体验很好，无意发现这个开源项目，因此试着体验并记录一下。&#xA;本次所使用的项目： {% ghcard navidrome/navidrome, theme=onedark %} {% ghcard gitbobobo/StreamMusic, theme=onedark %} {% ghcard spotDL/spotify-downloader, theme=onedark %}&#xA;Navidrome 部署 Navidrome 是一开源的音乐服务器，可以在任何设备随时收听音乐，就像个人版 Spotify。 特点如下：&#xA;几乎可以传输任何可用的音频格式 读取并使用所有元数据 对合辑（各种艺术家专辑）等支持 多用户，每个用户都有自己的播放次数、播放列表、收藏夹等&amp;hellip; 资源使用率极低 多平台，可在 macOS、Linux 和 Windows 上运行。还提供了 Docker 镜像。 适用于所有主要平台的现成二进制文件，包括 Raspberry Pi 自动监控库的更改、导入新文件并重新加载新元数据 基于 Material UI 的主题化、现代且响应式 Web 界面 与所有 Subsonic/Madsonic/Airsonic 客户端兼容 即时转码。可以为每个用户设置。支持 Opus 编码 翻译成多种语言 Docker 部署 推荐使用 Docker 部署，docker-compose.yaml 文件如下：&#xA;version: &amp;#34;3&amp;#34; services: navidrome: image: deluan/navidrome:latest user: 1000:1000 # should be owner of volumes ports: - &amp;#34;4533:4533&amp;#34; restart: unless-stopped environment: # Optional: put your config options customization here.</description>
    </item>
    <item>
      <title>终端设置代理</title>
      <link>http://localhost:1313/posts/61ca2491/</link>
      <pubDate>Wed, 17 Apr 2024 10:41:36 +0000</pubDate>
      <guid>http://localhost:1313/posts/61ca2491/</guid>
      <description>原文链接: https://doc.yoouu.cn/basic/proxy.html&#xA;前言 在国内使用终端安装各种依赖很有可能由于网络问题出错，因此通过设置终端本地代理，解决无法访问的问题。&#xA;Git git config --global http.proxy http://localhost:7890 git config --global https.proxy https://localhost:7890 # 恢复 git config --global --unset http.proxy git config --global --unset https.proxy # 如果发现取消代理的命令不生效，可以用以下命令查看全局配置信息 git config --global -l # 编辑全局配置，会启动编辑器，你可以手动去除代理信息 git config --global -e ssh clone 代理&#xA;找到你的 ssh 配置文件，没有就新建，例如 Windows -&amp;gt; C:\Users\your-username\.ssh\config&#xA;ProxyCommand connect -S 127.0.0.1:7890 -a none %h %p ...others Windows # 设置代理 netsh winhttp set proxy 127.0.0.1:1080 # 取消代理 netsh winhttp reset proxy # 查看代理 netsh winhttp show proxy CMD set http_proxy=http://127.</description>
    </item>
    <item>
      <title>Obsidian快速发布Hugo文章</title>
      <link>http://localhost:1313/posts/obsidian%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83hugo%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sat, 23 Mar 2024 13:13:25 +0800</pubDate>
      <guid>http://localhost:1313/posts/obsidian%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83hugo%E6%96%87%E7%AB%A0/</guid>
      <description>前言 通常使用静态博客写文章比较麻烦，上传图片也不方便，最近发现使用 Obsidian 配合 Shell commands 插件可以快速创建文章并预览发布，配合 Image auto upload Plugin 还可以快捷上传图片到图床。 需要用到的工具：&#xA;Obsidian Picgo 或者 Piclist 软件 快捷发布文章 首先下载好 Obsidian 并且开启第三方插件，在插件市场下载三个插件：&#xA;Image auto upload Plugin Shell commands Commander 然后在博客文章所在目录打开项目，即可看到所有博客文章。接下来通过 Shell commands 插件配置文章新建、预览、发布。&#xA;原理很简单，就是通过插件调用 CMD 程序，使用命令新建发布文章，然后通过 Commander 将命令绑定到 Obsidian 左侧快捷键，这样只需要点击对应的俺按钮即可快速运行命令。&#xA;创建命令 详细步骤以 新建文章 命令为参考，其余命令步骤相同。&#xA;设置工作目录：首先进入插件设置页面，选择 Environments 选项卡，在 Working Directiory 处输入自己博客的根目录。 新建命令：首先打开 Shell commands 插件设置，点击 New shell command，新建一个命令，输入命令 hugo new post/{{_post_title}}.md 。 设置别名：点击齿轮图标可以进入命令设置页面，在 Alias 处输入命名别名，输入 新建文章 ，可以自定义。 选择 Preactions： 在 Preactions 界面 Prompt 选项选择 Create a new prompt ，Prompt title 写 新建文章 ，然后点击 New prompt field，Field lable 设置为 请输入文章标题：，这个是文章运行前的提示，然后 target value 处选择 create a new custom variable，在 Variable name 处填写 post_title ，点击创建，最终值应该为为 {{_post_title}}，完成后点击创建，效果参考下图。接着在 Preaction 页面选择新创建的 Prompt 即可。 按照同样的步骤再创建预览文章、发布文章、停止 Hugo 进程几个命令。其中发布文章还需要创建新的 Prompt ，预览文章和停止进程仅需要输入命令即可。具体的命令和参数如下：</description>
    </item>
    <item>
      <title>部署自己的ChatGPT并白嫖GPT4的API</title>
      <link>http://localhost:1313/posts/cogpt/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cogpt/</guid>
      <description>前言 ChatGPT 官网使用不便，并且访问速度不佳，因此部署自己的 web 页面，通过 API 使用成为了主流选择，本文通过 ChatGPTNextWeb 部署页面，并通过 copilot 项目白嫖 GPT4 的 API。 前提：&#xA;copilot 访问权限（Github 学生包可以白嫖） vercel 账号 本文用到的项目地址如下：&#xA;CoGPT NextChat 💡 cogpt 可以把 OpenAI API 格式的请求转发到 GitHub Copilot 服务端，从而免费使用 gpt-4。&#xA;警告（来自作者博客） 这个项目仅适合个人使用。并不适合访问量巨大的盈利项目。&#xA;最佳实践方式：&#xA;本机部署，仅自己使用（推荐） 部署在个人服务器上，仅自己使用，或和几个朋友共同使用（不公开） 不建议的方式：&#xA;提供公共服务 在一个 ip 上使用了很多 token 容易被判定为异常行为 使用 Serverless 服务 由于 Serverless 服务的 ip 不固定，所以很容易被判定为异常行为 用于盈利项目 请求量过大，容易被判定为异常行为 请不要尝试上述任何一种不建议的方式，否则可能会导致 GitHub Copilot 账号，甚至 GitHub 账号被封禁。&#xA;部署服务 可以部署到本地电脑，也可以部署到 vps，这里以 vps 为例。&#xA;mkdir -p /opt/cogpt &amp;amp;&amp;amp; cd /opt/cogpt &amp;amp;&amp;amp; vim docker-compose.</description>
    </item>
    <item>
      <title>自建DNS解锁Netflix</title>
      <link>http://localhost:1313/posts/netfli-dns/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/netfli-dns/</guid>
      <description>通过 DNSmasq 和一台已解锁 Netflix 的服务器，将其余服务器全部解锁 Netflix 。&#xA;原理：使用 Dnsmasq 的DNS将网站解析劫持到 SNIproxy 反向代理的页面上。&#xA;特性：脚本默认解锁Netflix Hulu HBO 等，如需增减域名，请编辑下面文件： /etc/dnsmasq.d/custom_netflix.conf /etc/sniproxy.conf&#xA;项目地址：Github&#xA;安装 前提需求：&#xA;一台解锁 Netflix 的服务器 放行 53、80、443端口 快速安装：&#xA;wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;amp;&amp;amp; bash dnsmasq_sniproxy.sh -f 卸载：&#xA;wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;amp;&amp;amp; bash dnsmasq_sniproxy.sh -u systemd-resolve 服务占用 53 端口解决方法 systemctl stop systemd-resolved vim /etc/systemd/resolved.conf 按照下面说明修改文件&#xA;[Resolve] DNS=8.8.8.8 1.1.1.1 #取消注释，增加dns #FallbackDNS= #Domains= #LLMNR=no #MulticastDNS=no #DNSSEC=no #Cache=yes DNSStubListener=no #取消注释，把yes改为no 重启服务：</description>
    </item>
    <item>
      <title>甲骨文相关</title>
      <link>http://localhost:1313/posts/oracle/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/oracle/</guid>
      <description>前言 甲骨文没法直接重装系统，因此这里记录一下甲骨文相关问题。&#xA;开启 root 登录 vim /etc/ssh/sshd_config PermitRootLogin yes PasswordAuthentication yes systemctl restart sshd.service 卸载相关程序 pcbind systemctl stop rpcbind systemctl stop rpcbind.socket systemctl disable rpcbind systemctl disable rpcbind.socket oracle-cloud-agent systemctl stop oracle-cloud-agent systemctl disable oracle-cloud-agent systemctl stop oracle-cloud-agent-updater systemctl disable oracle-cloud-agent-updater 防火墙相关 停止 firewall 并禁止开机启动 systemctl stop firewalld.service systemctl disable firewalld.service ubuntu 开放所有端口&#xA;iptables -P INPUT ACCEPT iptables -P FORWARD ACCEPT iptables -P OUTPUT ACCEPT iptables -F 清除 iptables 规则</description>
    </item>
    <item>
      <title>部署Plex并挂载Alist</title>
      <link>http://localhost:1313/posts/plex/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/plex/</guid>
      <description>前言 由于最近 Netflix 清退了一大批低价区用户，并且不退款，需要与银行争议，就开了一个月的土耳其区，然而土耳其第一个月并不能用土耳其之外的 IP 观看，白白浪费一个月，虽然最近尼日利亚的低价已经超过了巴基斯坦，但还是决定放弃了，花钱找罪受，不如买个 Emby 。 之后在网上看到可以通过服务器部署 Plex Media Server ，将 Alist 挂载到服务器，Plex 添加 Alist 目录，然后 infuse 连接 Plex ，这样可以实现刮削，并且全平台同步，还可以搭配 Aria2 下载自动上传网盘，达到良好的观影效果。&#xA;一、可执行程序部署 1. 部署 Plex 部署可以通过可执行程序，也可以通过 docker ，如果想挂载 alist ，记得和 alist 程序安装在同一台服务器。&#xA;部署程序&#xA;# centos yum -y update &amp;amp;&amp;amp; yum -y install wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm yum install plexmediaserver*.rpm # Debian/Ubuntu系统 apt-get -y update &amp;amp;&amp;amp; apt-get -y upgrade wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb dpkg -i plexmediaserver*.deb 设置开机自启&#xA;systemctl enable plexmediaserver.service systemctl start plexmediaserver.</description>
    </item>
    <item>
      <title>Alist部署</title>
      <link>http://localhost:1313/posts/alist/</link>
      <pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/alist/</guid>
      <description>前言 目前很多人通过网盘分享影视资源，如阿里云盘、115网盘等，同时还有微软的 E5 管理员账号，一个账号就有 5T 空间，用来做存储很不错，但是众多网盘分享文件很不方便，网盘自己的页面看视频也比较简陋，这个时候我们可以通过目录列表整合各种网盘，如以前的 oneindex、olaindex，最近常用的是 Alist ，支持网盘众多，部署方便。&#xA;Alist 是一个支持多种存储，支持网页浏览和 WebDAV 的文件列表程序，由 gin 和 Solidjs 驱动，程序开源地址以及文档如下：&#xA;Github&#xA;文档&#xA;一、官方 Alist 1. 安装 安装非常简单，直接使用官方的一键脚本&#xA;# 安装 curl -fsSL &amp;#34;https://alist.nn.ci/v3.sh&amp;#34; | bash -s install # 更新 curl -fsSL &amp;#34;https://alist.nn.ci/v3.sh&amp;#34; | bash -s update # 卸载 curl -fsSL &amp;#34;https://alist.nn.ci/v3.sh&amp;#34; | bash -s uninstall 默认安装在 /opt/alist 中。自定义安装路径，将安装路径作为第二个参数添加，必须是绝对路径（如果路径以 alist 结尾，则直接安装到给定路径，否则会安装在给定路径 alist 目录下），如 安装到 /root：&#xA;# Install curl -fsSL &amp;#34;https://alist.nn.ci/v3.sh&amp;#34; | bash -s install /root # update curl -fsSL &amp;#34;https://alist.</description>
    </item>
    <item>
      <title>Alist自定义美化</title>
      <link>http://localhost:1313/posts/alist-modify/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/alist-modify/</guid>
      <description>自定义头部 &amp;lt;!--Alist V3建议添加的，已经默认添加了，如果你的没有建议加上--&amp;gt; &amp;lt;script src=&amp;#34;https://polyfill.io/v3/polyfill.min.js?features=String.prototype.replaceAll&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!--引入字体，全局字体使用--&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://npm.elemecdn.com/lxgw-wenkai-webfont@1.1.0/lxgwwenkai-regular.css&amp;#34; /&amp;gt; &amp;lt;!--不蒜子计数器--&amp;gt; &amp;lt;script async src=&amp;#34;https://busuanzi.icodeq.com/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- Font6，自定义底部使用和看板娘使用的图标和字体文件--&amp;gt; &amp;lt;link type=&amp;#39;text/css&amp;#39; rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://npm.elemecdn.com/font6pro@6.3.0/css/fontawesome.min.css&amp;#34; media=&amp;#39;all&amp;#39;&amp;gt; &amp;lt;link href=&amp;#34;https://npm.elemecdn.com/font6pro@6.3.0/css/all.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; &amp;lt;style&amp;gt; /* 去除通知栏 右上角 X */ .notify-render .hope-close-button { display: none; } /* 文字超长自动换行 */ .name-box .name { white-space: unset !important; overflow: unset !important; } /* 缩略图图片变大 代码中的160px 自己改 现在是注释状态若需要自行解除注释 */ /*.obj-box &amp;gt; div { grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)) } .obj-box &amp;gt; div .item-thumbnail{ height: 100px; }*/ /* 图片API用法点进去都会有食用说明的,API来自网络不保证实效性稳定性自己测试 樱花：https://www.</description>
    </item>
    <item>
      <title>记录一次PHP启动失败</title>
      <link>http://localhost:1313/posts/php/</link>
      <pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/php/</guid>
      <description>问题 在部署一个站点时，在安装了 PHP 7.4 的情况下安装 PHP 8.2，然而安装完成后启动报错。&#xA;具体报错内容如下：&#xA;/www/server/php/82/sbin/php-fpm: symbol lookup error: /www/server/php/82/sbin/php-fpm:undefined symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_interactive 解决 直接谷歌搜索报错内容，发现宝塔面板论坛有相关问题：php无法启动的N种常见错误解决教程 情况七，给出的解决办法是重新编译安装，然而编译安装后仍未解决（也有成功的，可以先试试）。CSDN 也有相关问题，并在 Serverfault找到了解决方法，来源在文末。&#xA;方法就是重新编译安装 libsodium&#xA;具体步骤如下：&#xA;删除 usr/local/lib目录下相关 libsodium文件 下载 tar 包，并解压 wget &amp;lt;https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable.tar.gz&amp;gt; # 建议稳定版 &amp;lt;https://download.libsodium.org/libsodium/releases/&amp;gt; tar -zxvf libsodium-1.0.19-stable.tar.gz 编译安装 cd ./libsodium-stable ./configure make &amp;amp;&amp;amp; make check sudo make install 完成后即可成功启动。&#xA;参考 Serverfault php无法启动的N种常见错误解决教程 CSDN Libsodium 官方文档 </description>
    </item>
    <item>
      <title>宝塔面板部署Bitwarden密码管理</title>
      <link>http://localhost:1313/posts/bitwarden/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/bitwarden/</guid>
      <description>前言 随着网站和程序注册增多，应用密码也难以记住，适用同一个密码存在风险，因此推荐使用密码管理软件，安全且方便，唯一的缺点可能是在别人设备登录，如果密码不能粘贴，输入会比较麻烦。这里推荐使用 Bitwarden 来进行管理，各个平台都有对应的客户端。 Bitwarden 是一款免费开源的密码管理软件，同时官方提供了 docker 镜像，将服务端部署在自己的设备上。Bitwarden 官方 docker 要求服务器内存在 2G 以上，但有大佬使用 Rust 进行重写，项目名为 vaultwarden, 降低了配置要求,地址如下： {% ghcard dani-garcia/vaultwarden, theme=onedark %}&#xA;如果不是特别担心密码安全，还是建议使用官方服务端，自建和官方并没有什么差别&#xA;安装 方法一：宝塔面板配合 Docker 部署 首先安装好宝塔面板并配置好环境，这里采用的是LNMP，PHP 版本7.4，同时创建一个站点，不需要数据库。在软件商店第 3 页 找到 Docker 管理器并安装。&#xA;打开 Docker 管理器，点击 镜像管理，再点击 获取镜像，如果是国内机器可以使用镜像加速：&#xA;&amp;lt;https://docker.mirrors.ustc.edu.cn/&amp;gt; # 也可自行寻找其他地址 然后将以下镜像名称填入输入框：vaultwarden/server，之后点击 获取镜像。&#xA;点击容器列表→创建容器，弹出创建容器界面后按如下填写四部分内容，并修改容器名称：&#xA;容器端口为80 服务器(TCP)端口可以自定义，这里使用6789 服务器目录自定义，这里使用站点目录 容器目录填写/data 内存配额按照自己服务器配置填写 端口映射和目录映射填写完成记得点击 + 添加，否则无效&#xA;方法二：Docker CLI 上述步骤也可直接使用命令安装（前提已安装 docker）&#xA;# 安装 vaultwarden/拉取镜像 docker pull vaultwarden/server:latest # 创建容器 (domain.com 换成自己的网站目录) docker run -d --name vaultwarden -v /www/wwwroot/domain.</description>
    </item>
  </channel>
</rss>
