<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Tom&#39;s Blog</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Tom&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Tom Almighty</copyright>
    <lastBuildDate>Thu, 20 Aug 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python学习笔记02 面向对象</title>
      <link>http://localhost:1313/posts/python02/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/python02/</guid>
      <description>1. 面向对象 面向对象编程&amp;ndash;Object Oriented Programming，简写 OOP&#xA;面向对象三大特性:&#xA;封装 继承 多态 1.1 基本概念 过程和对象：&#xA;面向过程和面向对象是两种不同编程方式 过程是早期的一个编程概念 过程类似于函数，只能执行，但没有返回值 函数不仅能执行，还可以返回结果 面向过程&#xA;把完成某一需求的所有步骤从头到尾逐步实现 根据开发需求，将某些功能独立的代码封装成一个又一个函数 最后完成的代码就是顺序的调用不同的函数 特点：&#xA;注重步骤与过程，不注重职责分工 如果需求复杂，代 码会变得很复杂 开发复杂项目，没有固定的套路，开发难度很大 面向对象&#xA;相比较函数，面向对象是更大的封装，根据职责在一个对象中封装多个方法&#xA;在完成一个需求前，首先确定职责&amp;ndash;要做的事情（方法） 根据职责确定不同的对象，在对象内部封装不同的方法（多个） 最后完成的代码，就是顺序地让不同的对象调用不同的方法 特点：&#xA;注重对象和职责，不同的对象承担不同的职责 更加适合应对复杂的需求变化，是专门应对复杂项目的开发，有固定的套路 需要在面向过程的基础上，再学习一些面向对象的语法 1.2 类和对象 概念 类(Class)&#xA;类是一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用 特征被称为属性 行为被称为方法 类就相当于制造飞机时的图纸，是一个模板，是负责创建对象的 对象(object)&#xA;对象是由类创建出来的一个具体存在，可以直接使用,又叫实例, 使用类创建对象的过程叫实例化 由哪一个类创建出来的对象，就拥有在哪一个类中定义的： 属性 方法 对象就相当于用图纸制造飞机 类和对象的关系&#xA;类是模板，对象是根据类这个模板创建出来的，应该先有类再有对象 类只有一个，而对象可以有很多个 不同的对象之间属性可能会各不相同 类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少 和概念上下级不同 类是一个特殊的对象&amp;ndash;类对象&#xA;Python 中一切皆对象&#xA;类对象可以拥有自己的:&#xA;类属性 类方法 设计 在使用面向对象开发前，首先应分析需求，确定程序中需要包含哪些类&#xA;设计类的三要素：&#xA;类名：这类事物的名字，满足大驼峰命名法 属性：这类事物具有什么样的特征 方法：这类事物具有什么样的行为 大驼峰命名法&#xA;每一个单词首字母大写 单词与单词间没有下划线 类名的确定 名词提炼法分析整个业务流程，出现的名词，通常就是找到的类</description>
    </item>
    <item>
      <title>Python学习笔记01-基础</title>
      <link>http://localhost:1313/posts/python01/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/python01/</guid>
      <description>1. 命名和循环 1.1 命名规则 项目：以数字加名称表示&#xA;01_python基础 文件：不能以数字开头，以字母、数字、下划线组合而成&#xA;py_01_python基础.py 1.2 格式化输出 以%表示&#xA;%s #字符串 %d #有符号十进制整数 %f #浮点数 1.3 循环 格式 while条件: 条件满足做的事情1 条件满足做的事情2 ...省略... 1.4 break 和 continue break:某一条件满足时，退出循环，不再执行后续代码 continue:某一条件满足时，不执行后续重复代码 区别:break 退出整个循环，continue 结束本次循环，开始下次循环 如果使用 continue 需要首先确认是否需要对循环计数修改&#xA;2. 循环打印九九乘法表 通过 while 的嵌套实现简单的九九乘法表打印&#xA;2.1 思路 首先定义一个变量控制行，初始值为1，确定行的循环条件 再定义一个变量控制列，始值1，确定列的循环条件&#xA;2.2 代码 row = 1 while row &amp;lt;= 9: col = 1 while col &amp;lt;= row: print(&amp;#34;%d * %d = %d&amp;#34; % (row, col, row*col), end=&amp;#34;\t&amp;#34;) col += 1 print(&amp;#34;&amp;#34;) row += 1 2.</description>
    </item>
  </channel>
</rss>
