<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Tom&#39;s Blog</title>
    <link>http://localhost:1313/tags/hugo/</link>
    <description>Recent content in Hugo on Tom&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Tom Almighty</copyright>
    <lastBuildDate>Wed, 17 Apr 2024 10:58:55 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo 文章转 Hexo</title>
      <link>http://localhost:1313/posts/993cff99/</link>
      <pubDate>Wed, 17 Apr 2024 10:58:55 +0000</pubDate>
      <guid>http://localhost:1313/posts/993cff99/</guid>
      <description>前言 将博客换成了 Hexo，因此 Front Matter 信息需要修改，使用 ChatGPT 写了一个简单的 Python 更改脚本，修改的项目可以自己更改。&#xA;使用 新建一个 Python 文件，写入以下代码，将需要更改的文件放入一个文件夹，然后将文件夹路径填入代码对应位置，运行即可，需要提前安装 pyyaml 模块。&#xA;代码中将 cover 更改为 index_img，具体可以自己更改。&#xA;import os import re import yaml def modify_frontmatter(frontmatter, modifications): frontmatter = frontmatter.copy() for key, value in modifications.items(): if key == &amp;#39;_add&amp;#39;: frontmatter.update(value) # 添加键值对 elif key == &amp;#39;_delete&amp;#39;: for k in value: frontmatter.pop(k, None) # 删除键 elif key in frontmatter: if value[&amp;#39;new_key&amp;#39;] is not None: # 修改键名 frontmatter[value[&amp;#39;new_key&amp;#39;]] = frontmatter.pop(key) if value[&amp;#39;new_value&amp;#39;] is not None: # 修改键值 frontmatter[key if value[&amp;#39;new_key&amp;#39;] is None else value[&amp;#39;new_key&amp;#39;]] = value[&amp;#39;new_value&amp;#39;] return frontmatter def convert_frontmatter(folder_path, modifications): for root, dirs, files in os.</description>
    </item>
    <item>
      <title>Obsidian快速发布Hugo文章</title>
      <link>http://localhost:1313/posts/obsidian%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83hugo%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sat, 23 Mar 2024 13:13:25 +0800</pubDate>
      <guid>http://localhost:1313/posts/obsidian%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83hugo%E6%96%87%E7%AB%A0/</guid>
      <description>前言 通常使用静态博客写文章比较麻烦，上传图片也不方便，最近发现使用 Obsidian 配合 Shell commands 插件可以快速创建文章并预览发布，配合 Image auto upload Plugin 还可以快捷上传图片到图床。 需要用到的工具：&#xA;Obsidian Picgo 或者 Piclist 软件 快捷发布文章 首先下载好 Obsidian 并且开启第三方插件，在插件市场下载三个插件：&#xA;Image auto upload Plugin Shell commands Commander 然后在博客文章所在目录打开项目，即可看到所有博客文章。接下来通过 Shell commands 插件配置文章新建、预览、发布。&#xA;原理很简单，就是通过插件调用 CMD 程序，使用命令新建发布文章，然后通过 Commander 将命令绑定到 Obsidian 左侧快捷键，这样只需要点击对应的俺按钮即可快速运行命令。&#xA;创建命令 详细步骤以 新建文章 命令为参考，其余命令步骤相同。&#xA;设置工作目录：首先进入插件设置页面，选择 Environments 选项卡，在 Working Directiory 处输入自己博客的根目录。 新建命令：首先打开 Shell commands 插件设置，点击 New shell command，新建一个命令，输入命令 hugo new post/{{_post_title}}.md 。 设置别名：点击齿轮图标可以进入命令设置页面，在 Alias 处输入命名别名，输入 新建文章 ，可以自定义。 选择 Preactions： 在 Preactions 界面 Prompt 选项选择 Create a new prompt ，Prompt title 写 新建文章 ，然后点击 New prompt field，Field lable 设置为 请输入文章标题：，这个是文章运行前的提示，然后 target value 处选择 create a new custom variable，在 Variable name 处填写 post_title ，点击创建，最终值应该为为 {{_post_title}}，完成后点击创建，效果参考下图。接着在 Preaction 页面选择新创建的 Prompt 即可。 按照同样的步骤再创建预览文章、发布文章、停止 Hugo 进程几个命令。其中发布文章还需要创建新的 Prompt ，预览文章和停止进程仅需要输入命令即可。具体的命令和参数如下：</description>
    </item>
    <item>
      <title>Hugo Stack主题修改</title>
      <link>http://localhost:1313/posts/stack/</link>
      <pubDate>Thu, 21 Mar 2024 17:13:54 +0800</pubDate>
      <guid>http://localhost:1313/posts/stack/</guid>
      <description>前言 上一篇文章介绍了如何部署 Hugo 博客，这里针对 Stack 主题的修改做一些记录。&#xA;准备 首先在博客根目录下的 assets 下创建一个名为 scss 的文件夹，然后在 scss 文件夹里创建一个名为 custom.scss 的文件，最终效果为~blog/assets/scss/custom.scss，创建好文件后，对于主题的大部分样式魔改都将写进这个 custom.scss，其中有很多冗余的代码。&#xA;整体细节调整 // ~\blog\assets\scss\custom.scss // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 12px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 &amp;amp;[data-scheme=&amp;#34;dark&amp;#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; // 暗黑模式下背景色 --body-background: #0D0D0D; // 暗黑模式下卡片背景色 --card-background: #121212; // 代码块背景色 .</description>
    </item>
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>http://localhost:1313/posts/hugo-blog/</link>
      <pubDate>Thu, 21 Mar 2024 17:13:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/hugo-blog/</guid>
      <description>前言 博客的引擎选择一直是个问题。动态博客和静态博客各有优劣。动态博客 Wordpress、Typecho 等拥有精美的主题，后台管理也比较方便，但是需要服务器。静态博客如 Hexo、Hugo、Astro 等可以直接部署静态页面，但是相对写文章比较繁琐一点。今天再次记录一下之前折腾的 Hugo，之前使用的主题是 Loveit，后来觉得 Stack 不错，所以本次就拿这个主题记录一下。&#xA;前提：&#xA;部署静态博客需要的：&#xA;一个 Github 账号 一个 Vercel 账号（非必须） 一个域名（非必须，但是有比较好） 1. 下载 Hugo 和 Git 到本地 将 Hugo 下载到本地，最好下载 Extended 版本，下载地址：点此下载&#xA;下载后放到一个不会删掉的地方，然后在系统环境变量 Path 中添加 Hugo 程序 和 Git 所在目录，完成后重启电脑，之后可以在 Windows Terminal 可以检测一下是否添加成功。&#xA;2. 创建仓库 在本地一个目录当作 Hugo 的目录，在此打开 Windows Terminal，然后输入下面的命令：&#xA;hugo new site blog 输入完成后会在文件夹下出现一个 blog 文件夹。&#xA;3. 下载主题 git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 更新主题 git submodule update --remote 如果后续修改主题，最好可以 fork 主题仓库，然后将上述地址换成自己的仓库地址。</description>
    </item>
    <item>
      <title>Webstack Hugo导航</title>
      <link>http://localhost:1313/posts/webstack-hugo/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/webstack-hugo/</guid>
      <description>前言 Webstack-Hugo 导航是基于纯静态的网址导航网站 webstack.cc 制作的 Hugo 主题，是一个基于 Hugo 的静态响应式网址导航主题。添加了天气及夜间模式，主要的配置信息都集成到了 config.toml，导航的各个信息都集成在 data/webstack.yml 文件中。&#xA;部署 首先下载 Hugo 到本地，同时添加系统环境变量。找到一个文件夹，然后在文件夹下打开 Windows Terminal 创建一个新的 Hugo 站点。 hugo new site webstack-hugo 下载 Webstack-Hugo 源码，并解压到 ~/webstack-hugo/themes 文件夹下，名称更改为 Webstack-Hugo，将 ~/webstack-hugo/themes/Webstack-Hugo/exampleSite 文件夹下所有内容复制到 Hugo 站点根目录，并删除站点根目录的 hugo.toml 文件。 修改网站配置。 配置信息在 config.toml 文件中 导航信息在 data/webstack.yml 文件中 新建一个 Github 仓库，将 Hugo 站点根目录下的文件推送到仓库，然后在 Vercel 创建新的项目并导入仓库。 网站 icon 获取 可以通过 API 获取网站的图标，地址如下：&#xA;https://api.iowen.cn/favicon/www.iowen.cn.png 将需要获取的网址替换到 favicon/ 后 .png 前，也可以通过在线工具箱：&#xA;https://tool.cccyun.cc/favicon 问题修复 部署好站点后会发现网站样式无法正常加载，但是本地部署正常，解决方法：将 layouts/partials 文件夹下文件中 relURL 更换为 absURL 即可。</description>
    </item>
  </channel>
</rss>
