<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Tom&#39;s Blog</title>
    <link>http://localhost:1313/tags/docker/</link>
    <description>Recent content in Docker on Tom&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Tom Almighty</copyright>
    <lastBuildDate>Thu, 09 May 2024 16:36:57 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stirling-PDF：强大的PDF工具箱</title>
      <link>http://localhost:1313/posts/stirling-pdf/</link>
      <pubDate>Thu, 09 May 2024 16:36:57 +0000</pubDate>
      <guid>http://localhost:1313/posts/stirling-pdf/</guid>
      <description>前言 通常我们需要处理一些 PDF 文档，使用时再寻找工具多有不便，不妨自己部署一个工具箱。&#xA;Stirling-PDF 是一个使用 Docker 部署的本地托管的、基于 Web 的 PDF 操作工具，支持多种语言它使您能够对 PDF 文件进行各种操作，包括分割、合并、转换、重组、添加图像、旋转、压缩等。这个本地托管的 Web 应用程序已发展为包含一组全面的功能，可满足您的所有 PDF 要求。&#xA;项目功能强大，详细的 Feature 可查看项目地址：&#xA;{% ghcard Stirling-Tools/Stirling-PDF, theme=onedark%}&#xA;本站预览地址如下：&#xA;{% link Stirling-PDF, https://pdf.grew.cc, /img/link.png %}&#xA;部署 版本差异 Stirling PDF 有两个不同的版本：完整版和超精简版，二者相差 400MB 左右，版本区别如下：&#xA;Technology Ultra-Lite Full Java ✔️ ✔️ JavaScript ✔️ ✔️ Libre ✔️ Python ✔️ OpenCV ✔️ OCRmyPDF ✔️ Operation Ultra-Lite Full add-page-numbers ✔️ ✔️ add-password ✔️ ✔️ add-image ✔️ ✔️ add-watermark ✔️ ✔️ adjust-contrast ✔️ ✔️ auto-split-pdf ✔️ ✔️ auto-redact ✔️ ✔️ auto-rename ✔️ ✔️ cert-sign ✔️ ✔️ crop ✔️ ✔️ change-metadata ✔️ ✔️ change-permissions ✔️ ✔️ compare ✔️ ✔️ extract-page ✔️ ✔️ extract-images ✔️ ✔️ flatten ✔️ ✔️ get-info-on-pdf ✔️ ✔️ img-to-pdf ✔️ ✔️ markdown-to-pdf ✔️ ✔️ merge-pdfs ✔️ ✔️ multi-page-layout ✔️ ✔️ overlay-pdf ✔️ ✔️ pdf-organizer ✔️ ✔️ pdf-to-csv ✔️ ✔️ pdf-to-img ✔️ ✔️ pdf-to-single-page ✔️ ✔️ remove-pages ✔️ ✔️ remove-password ✔️ ✔️ rotate-pdf ✔️ ✔️ sanitize-pdf ✔️ ✔️ scale-pages ✔️ ✔️ sign ✔️ ✔️ show-javascript ✔️ ✔️ split-by-size-or-count ✔️ ✔️ split-pdf-by-sections ✔️ ✔️ split-pdfs ✔️ ✔️ compress-pdf ✔️ extract-image-scans ✔️ ocr-pdf ✔️ pdf-to-pdfa ✔️ remove-blanks ✔️ Docker 部署 可以使用 docker run 命令运行，如下：</description>
    </item>
    <item>
      <title>Nginx Proxy Manager：替代宝塔的又一选择</title>
      <link>http://localhost:1313/posts/npm/</link>
      <pubDate>Thu, 09 May 2024 12:14:50 +0000</pubDate>
      <guid>http://localhost:1313/posts/npm/</guid>
      <description>前言 由于低版本的宝塔面板存在漏洞，高版本需要绑定手机，且占用较高，加上自己的服务大多是 Docker 部署，因此直接使用反向代理的面板更加方便。 Nginx Proxy Manager 是一个 Nginx 的代理管理器，简单方便，并且支持一键申请证书、自动续期。 项目地址如下： {% ghcard NginxProxyManager/nginx-proxy-manager, theme=onedark%}&#xA;部署 使用 Docker 部署，命令如下：&#xA;mkdir /opt/npm &amp;amp;&amp;amp; cd /opt/npm &amp;amp;&amp;amp; cat &amp;lt;&amp;lt; EOF &amp;gt; docker-compose.yml version: &amp;#39;3.8&amp;#39; services: app: image: &amp;#39;docker.io/jc21/nginx-proxy-manager:latest&amp;#39; restart: unless-stopped ports: - &amp;#39;80:80&amp;#39; - &amp;#39;81:81&amp;#39; - &amp;#39;443:443&amp;#39; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt EOF docker compose up -d 安装完成后可以使用 http://IP:81 访问后台，默认的用户名密码如下：&#xA;Email: admin@example.com Password: changeme 修改后即可正常使用，建议给后台地址反向代理。&#xA;反向代理 添加网站 主界面点击 Proxy Host- Add Proxy Host {% note success flat %} 三个选项可以自己选择是否开启</description>
    </item>
    <item>
      <title>Dockge：面向堆栈的docker-compose文件管理器</title>
      <link>http://localhost:1313/posts/dockge/</link>
      <pubDate>Thu, 09 May 2024 11:57:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/dockge/</guid>
      <description>前言 目前习惯使用 Docker 自建应用，而 compose 更是十分方便，本次使用的 dockge 是一个精美的、易于使用的、响应式的面向堆栈的自托管 docker-compose.yaml 管理器，项目地址如下：&#xA;{% ghcard louislam/dockge, theme=onedark%}&#xA;项目特点如下：&#xA;可以在面板方便的启动、编辑、更新、停止、重启、删除项目 交互式编辑 compose 文件 方便地进入项目终端 将 docker run 命令转换为 compose 文件 项目如图：&#xA;安装 以下使用的是项目推荐的命令，命令会在 /opt 目录下建立 /dockge 和 /stacks 目录，其中 /dockge 下为 Dockge 映射的文件夹， /stacks 为 Dockge 创建的项目，方便管理。&#xA;mkdir -p /opt/stacks /opt/dockge cd /opt/dockge curl &amp;#34;https://dockge.kuma.pet/compose.yaml?port=5001&amp;amp;stacksPath=%2Fopt%2Fstacks&amp;#34; --output compose.yaml docker compose up -d # V1版本或Podman启动命令 docker-compose up -d {% note info flat %} 如果想要更改端口以及安装文件夹，可以在官网手动下载 docker-compose 文件，官网可以在 UI 修改并直接下载。 {% endnote %}</description>
    </item>
    <item>
      <title>自建navidrome音乐服务</title>
      <link>http://localhost:1313/posts/navidrome/</link>
      <pubDate>Sat, 04 May 2024 10:28:07 +0000</pubDate>
      <guid>http://localhost:1313/posts/navidrome/</guid>
      <description>前言 最开始用网易云音乐，但很多歌曲没了版权，后来用了 Apple Music 学生会员，之后一直在使用 Spotify，体验很好，无意发现这个开源项目，因此试着体验并记录一下。&#xA;本次所使用的项目： {% ghcard navidrome/navidrome, theme=onedark %} {% ghcard gitbobobo/StreamMusic, theme=onedark %} {% ghcard spotDL/spotify-downloader, theme=onedark %}&#xA;Navidrome 部署 Navidrome 是一开源的音乐服务器，可以在任何设备随时收听音乐，就像个人版 Spotify。 特点如下：&#xA;几乎可以传输任何可用的音频格式 读取并使用所有元数据 对合辑（各种艺术家专辑）等支持 多用户，每个用户都有自己的播放次数、播放列表、收藏夹等&amp;hellip; 资源使用率极低 多平台，可在 macOS、Linux 和 Windows 上运行。还提供了 Docker 镜像。 适用于所有主要平台的现成二进制文件，包括 Raspberry Pi 自动监控库的更改、导入新文件并重新加载新元数据 基于 Material UI 的主题化、现代且响应式 Web 界面 与所有 Subsonic/Madsonic/Airsonic 客户端兼容 即时转码。可以为每个用户设置。支持 Opus 编码 翻译成多种语言 Docker 部署 推荐使用 Docker 部署，docker-compose.yaml 文件如下：&#xA;version: &amp;#34;3&amp;#34; services: navidrome: image: deluan/navidrome:latest user: 1000:1000 # should be owner of volumes ports: - &amp;#34;4533:4533&amp;#34; restart: unless-stopped environment: # Optional: put your config options customization here.</description>
    </item>
    <item>
      <title>Docker部署Sub-Store后端</title>
      <link>http://localhost:1313/posts/sub-store/</link>
      <pubDate>Mon, 08 Apr 2024 10:58:03 +0800</pubDate>
      <guid>http://localhost:1313/posts/sub-store/</guid>
      <description>前言 Sub-Store 是一个适用于 Loon 、 Surge 和 Quantumult X 的高级订阅管理工具。完全本地解析，无订阅泄露的风险。相关地址及文档见下方：&#xA;Github 地址 使用教程 自建教程 部署 mkdir -p /opt/sub-store &amp;amp;&amp;amp; cd /opt/sub-store cat &amp;gt; /opt/sub-store/docker-compose.yml &amp;lt;&amp;lt;EOF version: &amp;#34;3.8&amp;#34; services: sub-store: image: xream/sub-store:latest container_name: sub-store restart: always volumes: - /opt/sub-store:/opt/app/data environment: - SUB_STORE_FRONTEND_BACKEND_PATH=/xxx # 20位随机字符串 - SUB_STORE_CRON=1 0 * * * ports: - 3001:3001 stdin_open: true tty: true EOF docker compose up -d 随机字符串生成可以使用下面的网站：&#xA;IT 工具箱 1Password 密码生成 反向代理 使用 Nginx 或者其他工具反向代理，端口为 3001，代理完成后访问的地址为：</description>
    </item>
    <item>
      <title>部署Plex并挂载Alist</title>
      <link>http://localhost:1313/posts/plex/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/plex/</guid>
      <description>前言 由于最近 Netflix 清退了一大批低价区用户，并且不退款，需要与银行争议，就开了一个月的土耳其区，然而土耳其第一个月并不能用土耳其之外的 IP 观看，白白浪费一个月，虽然最近尼日利亚的低价已经超过了巴基斯坦，但还是决定放弃了，花钱找罪受，不如买个 Emby 。 之后在网上看到可以通过服务器部署 Plex Media Server ，将 Alist 挂载到服务器，Plex 添加 Alist 目录，然后 infuse 连接 Plex ，这样可以实现刮削，并且全平台同步，还可以搭配 Aria2 下载自动上传网盘，达到良好的观影效果。&#xA;一、可执行程序部署 1. 部署 Plex 部署可以通过可执行程序，也可以通过 docker ，如果想挂载 alist ，记得和 alist 程序安装在同一台服务器。&#xA;部署程序&#xA;# centos yum -y update &amp;amp;&amp;amp; yum -y install wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm yum install plexmediaserver*.rpm # Debian/Ubuntu系统 apt-get -y update &amp;amp;&amp;amp; apt-get -y upgrade wget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb dpkg -i plexmediaserver*.deb 设置开机自启&#xA;systemctl enable plexmediaserver.service systemctl start plexmediaserver.</description>
    </item>
    <item>
      <title>最全的订阅转换项目</title>
      <link>http://localhost:1313/posts/subconverter/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/subconverter/</guid>
      <description>前言 目前各个平台的代理软件的格式各不相同，各个服务厂商通常会提供给我们各个软件的订阅链接，但一些比较小的厂商提供的链接有限，或者提供的分流策略组不符合我们的预期，这个时候我们可以通过转换工具转换成我们所用软件的链接格式，或者使用自己修改的策略组实现更加灵活的分流。&#xA;准备工作 部署自己的前后端通常需要自己的域名，部分项目使用 Vercel 托管也可，因此最好准备：&#xA;VPS一台 两个解析的域名，二级域名即可 项目一：subconverter &amp;amp; sub-web subconverter 加 sub-web 是最常用的项目，目前后端仍在更新，并且支持了最新的协议转换。&#xA;项目地址：&#xA;前端：sub-web&#xA;后端：subconverter&#xA;一键脚本安装 网上找到的一键脚本：&#xA;# ubuntu apt-get install -y wget &amp;amp;&amp;amp; wget -O install.sh https://cdn.mxlong.com/install/subweb/install.sh &amp;amp;&amp;amp; chmod +x ./install.sh &amp;amp;&amp;amp; ./install.sh # centos yum install -y wget &amp;amp;&amp;amp; wget -O install.sh https://cdn.mxlong.com/install/subweb/install.sh &amp;amp;&amp;amp; chmod +x ./install.sh &amp;amp;&amp;amp; ./install.sh 脚本中的后端并不是原作者的后端，如有需要可以自行更换脚本中的下载地址。&#xA;手动安装 后端搭建 首先解析一个域名用作后端访问，这里以 backend.domain.com 为例，实际以自己的域名为准。&#xA;连接VPS后，下载并解压后端程序，可以使用如下命令，也可以使用宝塔面板，下载程序后解压。&#xA;cd /opt # 这里是程序安装目录，可以自行更换 wget https://github.com/tindy2013/subconverter/releases/download/v0.9.0/subconverter_linux64.tar.gz tar -zxvf subconverter_linux64.tar.gz 完成以后在 /opt 文件夹下会出现 subconverter文件夹，出现如下结构：</description>
    </item>
    <item>
      <title>宝塔面板部署Bitwarden密码管理</title>
      <link>http://localhost:1313/posts/bitwarden/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/bitwarden/</guid>
      <description>前言 随着网站和程序注册增多，应用密码也难以记住，适用同一个密码存在风险，因此推荐使用密码管理软件，安全且方便，唯一的缺点可能是在别人设备登录，如果密码不能粘贴，输入会比较麻烦。这里推荐使用 Bitwarden 来进行管理，各个平台都有对应的客户端。 Bitwarden 是一款免费开源的密码管理软件，同时官方提供了 docker 镜像，将服务端部署在自己的设备上。Bitwarden 官方 docker 要求服务器内存在 2G 以上，但有大佬使用 Rust 进行重写，项目名为 vaultwarden, 降低了配置要求,地址如下： {% ghcard dani-garcia/vaultwarden, theme=onedark %}&#xA;如果不是特别担心密码安全，还是建议使用官方服务端，自建和官方并没有什么差别&#xA;安装 方法一：宝塔面板配合 Docker 部署 首先安装好宝塔面板并配置好环境，这里采用的是LNMP，PHP 版本7.4，同时创建一个站点，不需要数据库。在软件商店第 3 页 找到 Docker 管理器并安装。&#xA;打开 Docker 管理器，点击 镜像管理，再点击 获取镜像，如果是国内机器可以使用镜像加速：&#xA;&amp;lt;https://docker.mirrors.ustc.edu.cn/&amp;gt; # 也可自行寻找其他地址 然后将以下镜像名称填入输入框：vaultwarden/server，之后点击 获取镜像。&#xA;点击容器列表→创建容器，弹出创建容器界面后按如下填写四部分内容，并修改容器名称：&#xA;容器端口为80 服务器(TCP)端口可以自定义，这里使用6789 服务器目录自定义，这里使用站点目录 容器目录填写/data 内存配额按照自己服务器配置填写 端口映射和目录映射填写完成记得点击 + 添加，否则无效&#xA;方法二：Docker CLI 上述步骤也可直接使用命令安装（前提已安装 docker）&#xA;# 安装 vaultwarden/拉取镜像 docker pull vaultwarden/server:latest # 创建容器 (domain.com 换成自己的网站目录) docker run -d --name vaultwarden -v /www/wwwroot/domain.</description>
    </item>
  </channel>
</rss>
