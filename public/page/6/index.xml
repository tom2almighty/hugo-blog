<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tom&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Tom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Tom Almighty</copyright>
    <lastBuildDate>Thu, 08 Aug 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Python学习笔记01-基础</title>
        <link>http://localhost:1313/posts/python01/</link>
        <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/python01/</guid>
        <description>Tom&#39;s Blog http://localhost:1313/posts/python01/ -&lt;h2 id=&#34;1-命名和循环&#34;&gt;1. 命名和循环&lt;/h2&gt;
&lt;h3 id=&#34;11-命名规则&#34;&gt;1.1 命名规则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;项目&lt;/strong&gt;：以数字加名称表示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;_python基础
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;文件&lt;/strong&gt;：不能以数字开头，以字母、数字、下划线组合而成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;py_01_python基础&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-格式化输出&#34;&gt;1.2 格式化输出&lt;/h3&gt;
&lt;p&gt;以&lt;code&gt;%&lt;/code&gt;表示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;s &lt;span style=&#34;color:#75715e&#34;&gt;#字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;d &lt;span style=&#34;color:#75715e&#34;&gt;#有符号十进制整数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;f &lt;span style=&#34;color:#75715e&#34;&gt;#浮点数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;13-循环&#34;&gt;1.3 循环&lt;/h3&gt;
&lt;h4 id=&#34;格式&#34;&gt;格式&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;while条件: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	条件满足做的事情1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	条件满足做的事情2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;省略&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;14-break-和-continue&#34;&gt;1.4 break 和 continue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;break&lt;/strong&gt;:某一条件满足时，退出循环，不再执行后续代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continue&lt;/strong&gt;:某一条件满足时，不执行后续重复代码&lt;/li&gt;
&lt;li&gt;区别:&lt;code&gt;break&lt;/code&gt; 退出整个循环，&lt;code&gt;continue&lt;/code&gt; 结束本次循环，开始下次循环&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用 &lt;code&gt;continue&lt;/code&gt; 需要首先确认是否需要对循环计数修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-循环打印九九乘法表&#34;&gt;2. 循环打印九九乘法表&lt;/h2&gt;
&lt;p&gt;通过 &lt;code&gt;while&lt;/code&gt; 的嵌套实现简单的九九乘法表打印&lt;/p&gt;
&lt;h3 id=&#34;21-思路&#34;&gt;2.1 思路&lt;/h3&gt;
&lt;p&gt;首先定义一个变量控制行，初始值为&lt;code&gt;1&lt;/code&gt;，确定行的循环条件
再定义一个变量控制列，始值&lt;code&gt;1&lt;/code&gt;，确定列的循环条件&lt;/p&gt;
&lt;h3 id=&#34;22-代码&#34;&gt;2.2 代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; row:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (row, col, row&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;col), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        col &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    row &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-注意&#34;&gt;2.3 注意&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; 函数有一个参数 &lt;code&gt;end&lt;/code&gt; ，默认的值为&lt;code&gt;\n&lt;/code&gt;，因此 &lt;code&gt;print&lt;/code&gt; 输出内容后会默认在文本后增加换行，修改参数值可以添加特定内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; , end=&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 双引号内即为可以更换的特定内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 单纯的换行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;24-结果&#34;&gt;2.4 结果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;25-转义字符&#34;&gt;2.5 转义字符&lt;/h3&gt;
&lt;p&gt;可以使用转义字符&lt;code&gt;\&lt;/code&gt;对打印结果进行规范&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\t &lt;span style=&#34;color:#75715e&#34;&gt;# 输出文本时垂直方向保持对齐&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\n &lt;span style=&#34;color:#75715e&#34;&gt;# 换行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; # 输出双引号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;3-函数&#34;&gt;3. 函数&lt;/h2&gt;
&lt;h3 id=&#34;31-格式&#34;&gt;3.1 格式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;函数名&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	封装代码
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数名不能以数字开头 不能与关键字重名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;定义函数后只表示封装代码定义函数后只表示封装代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不调用函数，函数不会执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;函数调用必须在定义函数之后，否则会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-函数注释&#34;&gt;3.2 函数注释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数定义上方保留两个空行（包含注释）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义函数的下方，连续三个引号内部进行注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在调用函数的位置，使用&lt;!-- raw HTML omitted --&gt;ctrl&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Q&lt;!-- raw HTML omitted --&gt;可快速查看&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-函数参数&#34;&gt;3.3 函数参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在函数名的小括号内部填写参数&lt;/li&gt;
&lt;li&gt;多个参数使用&lt;!-- raw HTML omitted --&gt;,&lt;!-- raw HTML omitted --&gt;分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例&#34;&gt;示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_2_num&lt;/span&gt;(num1, num2):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;两数字求和&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (num1, num2,result))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum_2_num(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;形参和实参&#34;&gt;形参和实参&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**形参：**定义函数时，小括号内的参数，用来接收参数，在函数内部作为变量使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**实参：**调用函数时，小括号内的参数，用来把数据传递到函数内部&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34-函数的返回值&#34;&gt;3.4 函数的返回值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;返回值是函数完成工作后，最后给调用者的一个结果&lt;/li&gt;
&lt;li&gt;在函数中使用 &lt;code&gt;return&lt;/code&gt; 关键字返回结果&lt;/li&gt;
&lt;li&gt;调用函数的一方，可以使用变量接收函数的返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例-1&#34;&gt;示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_2_num&lt;/span&gt;(num1, num2):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用变量接收函数调用的结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_2_num(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;计算结果：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; sum_result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注意-1&#34;&gt;注意&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;code&gt;return&lt;/code&gt; 表示返回，后续的代码都不会被执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;35-函数的嵌套调用&#34;&gt;3.5 函数的嵌套调用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个函数里又调用了另一个函数，就是嵌套调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;打印多条分割线&#34;&gt;打印多条分割线&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_line&lt;/span&gt;(char, times):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;打印分割线&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(char &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; times)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_lines&lt;/span&gt;(char, times):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;打印多行分割线
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param char:分割线使用的分割字符
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param times:分割线重复次数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print_line(char, times)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print_lines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;针对需求变化，要冷静思考，不要轻易更改已经完成的、能够正常执行的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-高级变量类型&#34;&gt;4. 高级变量类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;li&gt;元组&lt;/li&gt;
&lt;li&gt;字典&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python 中数据类型分为&lt;strong&gt;数字型&lt;/strong&gt;和&lt;strong&gt;非数字型&lt;/strong&gt;变量&lt;/p&gt;
&lt;p&gt;非数字型变量可进行如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是一个序列&lt;code&gt;sequence&lt;/code&gt;，也可以理解为容器&lt;/li&gt;
&lt;li&gt;取值&lt;code&gt;[ ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;遍历 &lt;code&gt;for in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;计算长度、最大值最小值、比较、删除&lt;/li&gt;
&lt;li&gt;链接 &lt;code&gt;+&lt;/code&gt;和重复 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关键字、函数、方法的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键字
&lt;ul&gt;
&lt;li&gt;关键字是 Python 内置的具有特殊意义的标识符&lt;/li&gt;
&lt;li&gt;关键字&lt;strong&gt;不需要使用括号&lt;/strong&gt;，函数和方法需要&lt;/li&gt;
&lt;li&gt;Python 中有 &lt;strong&gt;33&lt;/strong&gt; 个关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数
&lt;ul&gt;
&lt;li&gt;函数封装了独立功能，可以直接调用&lt;/li&gt;
&lt;li&gt;函数需要死记硬背&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法
&lt;ul&gt;
&lt;li&gt;方法和函数类似，同样是封装了独立功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;对象.方法名(参数)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;需要&lt;strong&gt;对象&lt;/strong&gt;来&lt;strong&gt;调用&lt;/strong&gt;，表示针对这个&lt;strong&gt;对象&lt;/strong&gt;的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;41-列表&#34;&gt;4.1 列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; 是Python 中使用最频繁的，其他语言中通常叫&lt;strong&gt;数组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;code&gt;[ ]&lt;/code&gt;定义，数据间用 &lt;code&gt;,&lt;/code&gt;分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表的索引从 &lt;code&gt;0&lt;/code&gt; 开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引&lt;/strong&gt;就是列表中的位置序号，又被称为&lt;strong&gt;下标&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从列表取值超出索引范围会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取值：变量[索引]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列表常用方法&#34;&gt;列表常用方法&lt;/h4&gt;
&lt;p&gt;定义空的列表，如 &lt;code&gt;name_list = []&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;name_list&lt;/code&gt;. 按下 &lt;!-- raw HTML omitted --&gt;TAB&lt;!-- raw HTML omitted --&gt; 键，可以看到可用的方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;常用方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;索引&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.index&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;取值和索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增加&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.append&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表末尾增加数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.insert&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指定索引增加数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.extend&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;把另一个列表完整内容追加都列表末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.remove&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除列表指定的出现的第一个数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.pop&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;默认删除列表最后一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.clear&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;清空列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;统计&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.count&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;计算列表某一元素出现的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;排序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.sort&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;升序/降序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.reverse&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逆序（反转）列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;del&lt;/code&gt; 关键字同样可以删除列表中的元素&lt;/li&gt;
&lt;li&gt;本质是将&lt;strong&gt;变量从内存中删除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果使用 &lt;code&gt;del&lt;/code&gt; 关键字将变量从内存中删除，后续代码不能使用这个变量&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;len&lt;/code&gt; 关键字可以计算列表总的元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;循环遍历&#34;&gt;循环遍历&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;遍历&lt;/strong&gt;就是从头到尾依次从列表中获取数据
&lt;ul&gt;
&lt;li&gt;在循环内部针对每一个元素，执行相同的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 中提供迭代遍历&lt;code&gt;iteration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;for&lt;/code&gt; 就能实现迭代遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 循环内部使用的变量 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; 列表:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    code
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列表存储相同类型的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过迭代遍历，在循环体内部对每一个元素执行相同的操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 列表中可以存储不同类型的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-元组&#34;&gt;4.2 元组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tuple&lt;/code&gt; 与列表类似，不同之处在于元组的&lt;strong&gt;元素不能修改&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多个元素组成的序列&lt;/li&gt;
&lt;li&gt;在 Python 开发中，有特殊的应用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用于存储一串信息，数据间用&lt;code&gt;,&lt;/code&gt; 分隔&lt;/li&gt;
&lt;li&gt;元组用 &lt;code&gt;()&lt;/code&gt; 定义，索引从 &lt;code&gt;0&lt;/code&gt; 开始&lt;/li&gt;
&lt;li&gt;创建空元组: &lt;code&gt;empty_tuple = ()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当元组中只有一个元素时，需要在元素后加入&lt;code&gt;,&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元组常用操作&#34;&gt;元组常用操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;.index&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.count&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;循环遍历-1&#34;&gt;循环遍历&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 循环内部使用的变量 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; 元组:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    code
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Python 中，可以使用 &lt;code&gt;for&lt;/code&gt; 遍历所有非数字类型变量：列表、元组、字典、字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在实际开发中，除非能够&lt;strong&gt;确认元组数据中的数据类型&lt;/strong&gt;，否则针对元组的循环遍历需求并不是很多&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;应用场景&#34;&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;函数的&lt;strong&gt;参数&lt;/strong&gt;和&lt;strong&gt;返回值&lt;/strong&gt;，一个函数可以接收&lt;strong&gt;任意多个参数&lt;/strong&gt;，或者&lt;strong&gt;一次返回多个数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式字符串&lt;/strong&gt;，格式化字符串后的&lt;code&gt;()&lt;/code&gt; 本质就是一个元组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;让列表不可被修改&lt;/strong&gt;，保护数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;元组和列表转换&#34;&gt;元组和列表转换&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;list&lt;/code&gt; 函数可以把元组转换成列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list(元组)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;tuple&lt;/code&gt; 函数可以把列表转换成元组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tuple(列表)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;43-字典&#34;&gt;4.3 字典&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dictionary&lt;/code&gt; 是除列表以外 Python 中&lt;strong&gt;最灵活&lt;/strong&gt;的数据类型&lt;/li&gt;
&lt;li&gt;字典同样可以用来&lt;strong&gt;存储多个数据&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通常用于&lt;strong&gt;描述一个&lt;/strong&gt;物体的相关信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;和列表的区别&#34;&gt;和列表的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;列表是&lt;strong&gt;有序&lt;/strong&gt;的对象集合&lt;/li&gt;
&lt;li&gt;字典是&lt;strong&gt;无序&lt;/strong&gt;的对象集合&lt;/li&gt;
&lt;li&gt;字典用 &lt;code&gt;{}&lt;/code&gt; 定义&lt;/li&gt;
&lt;li&gt;字典使用 &lt;code&gt;键值&lt;/code&gt; 存储数据，键值对儿之间用 &lt;code&gt;,&lt;/code&gt;隔开
&lt;ul&gt;
&lt;li&gt;键 &lt;code&gt;key&lt;/code&gt; 是索引&lt;/li&gt;
&lt;li&gt;值 &lt;code&gt;value&lt;/code&gt; 是数据&lt;/li&gt;
&lt;li&gt;键和值之间使用 &lt;code&gt;:&lt;/code&gt; 分隔&lt;/li&gt;
&lt;li&gt;键必须是唯一的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;值可以取任何数据类型，但键只能使用&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;数字&lt;/strong&gt;或&lt;strong&gt;元组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xiaoming &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;小明&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.75&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;weight&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;75.5&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(xiaoming)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;print&lt;/code&gt; 函数输出顺序和定义顺序通常不一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;基本使用&#34;&gt;基本使用&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys() &lt;span style=&#34;color:#75715e&#34;&gt;# 所有 key 列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values() &lt;span style=&#34;color:#75715e&#34;&gt;# 所有 value 列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items() &lt;span style=&#34;color:#75715e&#34;&gt;# 所有(key, value)元组列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict[key] &lt;span style=&#34;color:#75715e&#34;&gt;# 从字典中取值，key 不存在会报错&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(key) &lt;span style=&#34;color:#75715e&#34;&gt;# 可以从字典中取值，key 不存在会报错&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; dict[key] &lt;span style=&#34;color:#75715e&#34;&gt;# 删除指定键值对，key 不存在会报错&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(key) &lt;span style=&#34;color:#75715e&#34;&gt;# 删除指定键值对，key 不存在会报错&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;popitem() &lt;span style=&#34;color:#75715e&#34;&gt;# 随机删除一个键值对&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cleat &lt;span style=&#34;color:#75715e&#34;&gt;# 清空字典&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color:#75715e&#34;&gt;# 如果 key 存在修改数据，不存在新建键值对&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(key, value) &lt;span style=&#34;color:#75715e&#34;&gt;# 如果 key 存在修改数据，不存在新建键值对&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(dict2) &lt;span style=&#34;color:#75715e&#34;&gt;# 将字典2合并到字典，如果被合并的字典包含已存在的键                      值对，会覆盖原有的键值对&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;循环遍历-2&#34;&gt;循环遍历&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# k 是每一次循环中获取到的键值对的 key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    code
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;应用场景-1&#34;&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用多个&lt;strong&gt;键值对&lt;/strong&gt;，存储描述一个物体的相关信息&lt;/li&gt;
&lt;li&gt;将多个字典放在&lt;strong&gt;一个列表&lt;/strong&gt;中，再进行遍历，在循环体内部针对每一个字典进行&lt;strong&gt;相同的处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;44-字符串&#34;&gt;4.4 字符串&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表示文本的数据类型&lt;/li&gt;
&lt;li&gt;Python 中可以用&lt;strong&gt;一对双引号&lt;/strong&gt;或者&lt;strong&gt;一对单引号&lt;/strong&gt;定义字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大多数编程语言使用&lt;strong&gt;双引号&lt;/strong&gt;定义字符串&lt;/li&gt;
&lt;li&gt;Python 中如果字符串内部需要使用双引号，定义字符串用单引号&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以使用&lt;strong&gt;索引&lt;/strong&gt;获得一个字符串中中指定位置的字符，索引从 0 开始&lt;/li&gt;
&lt;li&gt;也可以使用 &lt;code&gt;for&lt;/code&gt; &lt;strong&gt;循环遍历&lt;/strong&gt;字符串中每一个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常用操作&#34;&gt;常用操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.count&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.index&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串方法&#34;&gt;字符串方法&lt;/h4&gt;
&lt;h5 id=&#34;判断类型&#34;&gt;判断类型&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isspace()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 中只包含空格，返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isalnum()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isalpha()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 至少有一个字符并且所有字符都是字母则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isdecimal()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 只包含数字则返回 True，全角数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isdigit()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 只包含数字则返回 True，全角数字、（1）、\u00b2 （unicode 字符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isnumeric()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 只包含数字则返回 True，全角数字、汉字数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.istitle()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 是标题化的(每个标题的首字母大写)则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.islower()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string.isupper()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt; &lt;code&gt;digit&lt;/code&gt; &lt;code&gt;numeric&lt;/code&gt; 三个方法中
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt; 方法只包含数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;digit&lt;/code&gt; 还可包含 &lt;code&gt;unicode&lt;/code&gt; 字符，如带括号的 1 （1）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numeric&lt;/code&gt; 方法还会包含&lt;strong&gt;中文数字&lt;/strong&gt;，如：一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般使用 &lt;code&gt;decimal&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;查找和替换&#34;&gt;查找和替换&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string.startswith(str)&lt;/td&gt;
&lt;td&gt;检查字符串是否以 str 开头，是则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.endswith(str)&lt;/td&gt;
&lt;td&gt;检查字符串是否以 str 结束，是则返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.find(str, start=0, end=len(string))&lt;/td&gt;
&lt;td&gt;检查 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围，如果是返回开始的索引值，否则返回 -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.rfind(str, start=0, end=len(string))&lt;/td&gt;
&lt;td&gt;类似于 find 函数，不过是从右边查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.index(str, start=0, end=len(string))&lt;/td&gt;
&lt;td&gt;跟 find() 方法类似，只不过如果 str 不在string 会报错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.rindex(str, start=0, end=len(string))&lt;/td&gt;
&lt;td&gt;类似于 index()，不过是从右边开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.replace(old_str, new_str, num=string.count(old))&lt;/td&gt;
&lt;td&gt;把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; 方法和 &lt;code&gt;index&lt;/code&gt; 方法都可以查找指定字符串是否包含在字符串中，如果指定字符串不存在
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; 方法返回 &lt;strong&gt;-1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; 方法会&lt;strong&gt;报错&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt; 方法执行完成后会返回新的字符串，但&lt;strong&gt;不会修改原有字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;大小写转换&#34;&gt;大小写转换&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string.capitalize()&lt;/td&gt;
&lt;td&gt;把字符串的第一个字符大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.title()&lt;/td&gt;
&lt;td&gt;把字符串的每个单词首字母大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.lower()&lt;/td&gt;
&lt;td&gt;转换 string 中所有大写字符为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.upper()&lt;/td&gt;
&lt;td&gt;转换 string 中所有小写字母为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.swapcase()&lt;/td&gt;
&lt;td&gt;翻转 string 中的大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;文本对齐&#34;&gt;文本对齐&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string.ljust(width)&lt;/td&gt;
&lt;td&gt;返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.rjust(width)&lt;/td&gt;
&lt;td&gt;返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.center(width)&lt;/td&gt;
&lt;td&gt;返回一个原字符居中，并使用空格填充至长度 width 的新字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;去除空白字符&#34;&gt;去除空白字符&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string.lstrip()&lt;/td&gt;
&lt;td&gt;截掉 string 左边（开始）的空白字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.rstrip()&lt;/td&gt;
&lt;td&gt;截掉 string 右边（末尾）的空白字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.strip()&lt;/td&gt;
&lt;td&gt;截掉 string 左右两边的空白字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;拆分和连接&#34;&gt;拆分和连接&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string.partition(str)&lt;/td&gt;
&lt;td&gt;把字符串 string 分成一个 3 元素的元组（str 前面，str str 后面）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.rpartition(str)&lt;/td&gt;
&lt;td&gt;类似于partition()方法，不过是从右边开始查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.split(str=&amp;quot;&amp;quot;, num)&lt;/td&gt;
&lt;td&gt;以 str 为分隔符拆分 string ，如果 num 有指定值，则仅分隔 num+1 个子字符串，str 默认包含 \t\n\r和空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.splitlines()&lt;/td&gt;
&lt;td&gt;按照行(\r, \n, \r\n)分隔，返回一个包含各行作为元素的列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.join(seq)&lt;/td&gt;
&lt;td&gt;以 string 作为分隔符，将 seq 中所有元素（的字符串表示）合并作为一个新的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;45-公共方法&#34;&gt;4.5 公共方法&lt;/h3&gt;
&lt;h4 id=&#34;python-内置函数&#34;&gt;Python 内置函数&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;len(item)&lt;/td&gt;
&lt;td&gt;计算容器中元素个数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;del(item)&lt;/td&gt;
&lt;td&gt;删除变量&lt;/td&gt;
&lt;td&gt;del 有两种方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(item)&lt;/td&gt;
&lt;td&gt;返回容器中元素的最大值&lt;/td&gt;
&lt;td&gt;如果是字典，只针对 key 比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(item)&lt;/td&gt;
&lt;td&gt;返回容器中元素的最小值&lt;/td&gt;
&lt;td&gt;如果是字典，只针对 key 比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmp(item1, item2)&lt;/td&gt;
&lt;td&gt;比较两个值，-1 小于/0 相等/ 1 大于&lt;/td&gt;
&lt;td&gt;Python 3.x取消了 cmp函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;字符串比较符合以下规则：&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&amp;lt;&amp;ldquo;A&amp;rdquo;&amp;lt;&amp;ldquo;a&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;两个字典不能比较大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;切片&#34;&gt;切片&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;字符串[开始索引: 结束索引: 步长]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;切片&lt;/strong&gt;(&lt;code&gt;slice&lt;/code&gt;)方法适用于&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;列表&lt;/strong&gt;、&lt;strong&gt;元组&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;切片使用&lt;strong&gt;索引值&lt;/strong&gt;限定范围，从一个大的字符串中切出小的字符串&lt;/li&gt;
&lt;li&gt;列表和元组是&lt;strong&gt;有序&lt;/strong&gt;的集合，能通过索引值获取对应数据&lt;/li&gt;
&lt;li&gt;字典是&lt;strong&gt;无序&lt;/strong&gt;集合，通过键值对保存数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定的区间属于&lt;strong&gt;左闭右开&lt;/strong&gt;型
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[开始索引，结束索引)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从起始开始，到结束位的&lt;strong&gt;前一位&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从头开始，开始索引数字可以省略，&lt;strong&gt;冒号不能省略&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;到末尾结束，结束索引数字可以省略，&lt;strong&gt;冒号不能省略&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;步长默认为 &lt;strong&gt;1&lt;/strong&gt; ，如果&lt;strong&gt;连续切片，数字和冒号都可以省略&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;运算符&#34;&gt;运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;Python 表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;支持的数据类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;[1, 2] + [3, 4]&lt;/td&gt;
&lt;td&gt;[1, 2, 3, 4]&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;字符串、列表、元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;[&amp;ldquo;Hi!&amp;rdquo;] * 4&lt;/td&gt;
&lt;td&gt;[&amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;]&lt;/td&gt;
&lt;td&gt;重复&lt;/td&gt;
&lt;td&gt;字符串、列表、元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;3 in (1, 2, 3)&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;元素是否存在&lt;/td&gt;
&lt;td&gt;字符串、列表、元组、字典&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not in&lt;/td&gt;
&lt;td&gt;4 not in (1, 2, 3)&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;元素是否不存在&lt;/td&gt;
&lt;td&gt;字符串、列表、元组、字典&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt; &amp;gt;= == &amp;lt; &amp;lt;=&lt;/td&gt;
&lt;td&gt;(1, 2, 3) &amp;lt; (2, 2, 3)&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;元素比较&lt;/td&gt;
&lt;td&gt;字符串、列表、元组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; 在对&lt;strong&gt;字典&lt;/strong&gt;操作时，判断的是字典的&lt;strong&gt;键&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; 和 &lt;code&gt;not in&lt;/code&gt; 被称为&lt;strong&gt;成员运算符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;完整的-for--循环语法&#34;&gt;完整的 for  循环语法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 变量 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; 集合:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    循环体代码
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    没有通过 &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; 退出循环&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;循环结束后&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;会执行的代码
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;循环体内部使用 &lt;code&gt;break&lt;/code&gt; 关键字  &lt;code&gt;else&lt;/code&gt; 以下的代码不会被执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-2&#34;&gt;应用场景&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;迭代遍历&lt;/strong&gt;嵌套数据类型时，例如，&lt;strong&gt;一个列表包含多个字典&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需求：判断某一个字典中是否存在指定的值
&lt;ul&gt;
&lt;li&gt;如果存在，提示并且退出循环&lt;/li&gt;
&lt;li&gt;如果不存在，循环整体结束后，得到统一的提示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;students &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;阿土&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;小美&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在学员列表中搜索指定名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; stu_dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; students:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(stu_dict)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; stu_dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; find_name:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;找到了 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; find_name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;没有找到&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; find_name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;5-语法进阶&#34;&gt;5. 语法进阶&lt;/h2&gt;
&lt;h3 id=&#34;51-变量的引用&#34;&gt;5.1 变量的引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;都保存在内存中&lt;/li&gt;
&lt;li&gt;Python 中函数的&lt;strong&gt;参数传递&lt;/strong&gt;以及&lt;strong&gt;返回值&lt;/strong&gt;都是靠&lt;strong&gt;引用&lt;/strong&gt;传递的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用的概念&#34;&gt;引用的概念&lt;/h4&gt;
&lt;p&gt;Python 中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量和数据分开存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;保存在内存中的一个位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;中保存着数据在内存中的&lt;strong&gt;地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;变量中&lt;strong&gt;记录数据地址&lt;/strong&gt;的动作就叫&lt;strong&gt;引用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id()&lt;/code&gt; 函数可以查看变量中保存数据的内存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果变量已经被定义，当给一个变量赋值的时候，本质上是修改了&lt;strong&gt;数据的引用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;strong&gt;不再&lt;/strong&gt;对之前的数据引用&lt;/li&gt;
&lt;li&gt;变量改为对新赋值的数据引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;函数的参数和返回值的传递&#34;&gt;函数的参数和返回值的传递&lt;/h4&gt;
&lt;p&gt;Python 中，函数的&lt;strong&gt;实参/返回值&lt;/strong&gt;都是靠&lt;strong&gt;引用&lt;/strong&gt;传递的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用函数，本质上是传递的&lt;strong&gt;实参/返回值****保存数据的引用&lt;/strong&gt;，而不是实参保存的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果不定义变量接收函数的返回值，程序不会报错，但是无法获得返回结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;52-可变类型不可变类型&#34;&gt;5.2 可变类型不可变类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不可变类型，内存中的数据不允许被修改
&lt;ul&gt;
&lt;li&gt;数字类型 &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串 &lt;code&gt;str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;元组 &lt;code&gt;tuple&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可变类型，内存中的数据可以被修改
&lt;ul&gt;
&lt;li&gt;列表 &lt;code&gt;list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字典 &lt;code&gt;dict&lt;/code&gt; 字典的 &lt;code&gt;key&lt;/code&gt; 只能使用&lt;strong&gt;不可变数据类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-局部变量和全局变量&#34;&gt;5.3 局部变量和全局变量&lt;/h3&gt;
&lt;h4 id=&#34;局部变量&#34;&gt;局部变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;局部变量&lt;/strong&gt;是在函数&lt;strong&gt;内部&lt;/strong&gt;定义的变量，只能在函数内部使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数执行结束后，函数内部的局部变量，会被系统&lt;strong&gt;回收&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部变量的&lt;strong&gt;生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生命周期是变量从&lt;strong&gt;被创建&lt;/strong&gt;到&lt;strong&gt;被系统回收&lt;/strong&gt;的过程&lt;/li&gt;
&lt;li&gt;局部变量在函数&lt;strong&gt;执行&lt;/strong&gt;时才会被创建&lt;/li&gt;
&lt;li&gt;局部变量在生命周期内，可以用来存储函数内部临时使用到的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全局变量&#34;&gt;全局变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局变量&lt;/strong&gt;是在函数外部定义的变量，&lt;strong&gt;所有&lt;/strong&gt;函数都可以使用&lt;/li&gt;
&lt;li&gt;其他开发语言中&lt;strong&gt;大多不推荐使用全局变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不允许在函数内部修改全局变量&lt;/li&gt;
&lt;li&gt;在函数内部重新赋值，只是定义了一个&lt;strong&gt;局部变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;希望修改全局变量的值 使用 &lt;code&gt;global&lt;/code&gt; 声明变量即可&lt;/li&gt;
&lt;li&gt;应该把模块中的所有全局变量定义到&lt;strong&gt;所有函数上方&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;全局变量命名前方应加 &lt;code&gt;g_&lt;/code&gt; 或 &lt;code&gt;gl_&lt;/code&gt; 等与局部变量区分&lt;/li&gt;
&lt;li&gt;如果局部变量和局部变量名称相同，&lt;code&gt;pycharm&lt;/code&gt; 会在局部变量下方显示灰色虚线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54-参数和返回值&#34;&gt;5.4 参数和返回值&lt;/h3&gt;
&lt;p&gt;函数根据&lt;strong&gt;有没有参数&lt;/strong&gt;和&lt;strong&gt;有没有返回值&lt;/strong&gt;可以自由组合，共 4 种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无参数，无返回值&lt;/li&gt;
&lt;li&gt;无参数，有返回值&lt;/li&gt;
&lt;li&gt;有参数，无返回值&lt;/li&gt;
&lt;li&gt;有参数，有返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果函数内部&lt;strong&gt;处理数据不确定&lt;/strong&gt;，可以将外界数据以参数形式传递给函数&lt;/li&gt;
&lt;li&gt;如果希望函数执行完成后，&lt;strong&gt;向外界汇报结果&lt;/strong&gt;，可以增加返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数的返回值-多个返回值&#34;&gt;函数的返回值-多个返回值&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;元组&lt;/strong&gt;可以包含多个数据，因此可以使用元组让函数一次返回多个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果函数返回的结果是元组，&lt;strong&gt;小括号可以省略&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果函数的&lt;strong&gt;返回值类型是元组&lt;/strong&gt;，需要&lt;strong&gt;单独&lt;/strong&gt;处理元组中的元素可以使用&lt;strong&gt;多个变量&lt;/strong&gt;，一次接收函数的返回结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：使用此方法，变量的个数应该和元组中元素的&lt;strong&gt;个数保持一致&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题：交换两个变量的值?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1. 使用其他变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# c = a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a = b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# b = c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 2. 不使用其他变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a = a + b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# b = a - b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a = a - b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 3. Python 专有&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a, b = (b, a)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 元组小括号可省略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b, a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(b)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;函数的参数&#34;&gt;函数的参数&lt;/h4&gt;
&lt;h5 id=&#34;不可变和可变参数&#34;&gt;不可变和可变参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在函数内部，针对参数使用赋值语句&lt;strong&gt;不会影响&lt;/strong&gt;调用函数时传递的&lt;strong&gt;实参变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无论&lt;/strong&gt;传递的参数是&lt;strong&gt;可变&lt;/strong&gt;还是&lt;strong&gt;不可变&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在函数内部，针对参数使用赋值语句,&lt;strong&gt;不会修改外部实参变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;demo&lt;/span&gt;(num, num_list):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;函数内部的代码&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 在函数内部，针对参数使用赋值语句,不会修改外部实参变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(num_list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;函数执行完成&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gl_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gl_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;demo(gl_num, gl_list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(gl_num)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果传递的参数是&lt;strong&gt;可变类型&lt;/strong&gt;，在函数内部，使用&lt;strong&gt;方法&lt;/strong&gt;修改了数据的内容，同样会&lt;strong&gt;影响到外部数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;demo&lt;/span&gt;(num_list):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;函数内部代码&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(num_list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;函数执行完成&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gl_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;demo(gl_list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(gl_list)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问题：&amp;ndash; +=&lt;/p&gt;
&lt;p&gt;在 Python 中，列表变量调用 &lt;code&gt;+=&lt;/code&gt; 本质上是在执行列表变量的 &lt;code&gt;extend&lt;/code&gt; 方法，不会修改变量的引用&lt;/p&gt;
&lt;h5 id=&#34;缺省参数&#34;&gt;缺省参数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义函数时，可以给某个参数&lt;strong&gt;指定一个默认值&lt;/strong&gt;，具有默认值的参数就叫做缺省参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带有默认值的&lt;strong&gt;缺省参数必须在参数列表末尾&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有多个缺省值，需要&lt;strong&gt;指定参数名&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多值参数&#34;&gt;多值参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有可能需要一个函数能够处理的参数&lt;strong&gt;个数是不确定的&lt;/strong&gt;，这时使用多指参数&lt;/li&gt;
&lt;li&gt;Python 中有两种多值参数
&lt;ul&gt;
&lt;li&gt;参数名前增加一个 &lt;code&gt;*&lt;/code&gt;，可以接收&lt;strong&gt;元组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参数名前增加两个 &lt;code&gt;*&lt;/code&gt;，可以接收&lt;strong&gt;字典&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般在给多指参数命名时，习惯使用以下两个名字
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*args&lt;/code&gt; &amp;ndash;存放&lt;strong&gt;元组&lt;/strong&gt;参数，前面一个&lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**kwargs&lt;/code&gt; &amp;ndash;存放&lt;strong&gt;字典&lt;/strong&gt;参数，前面两个&lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; 是 &lt;code&gt;arguments&lt;/code&gt; 的缩写，有变量的含义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kw&lt;/code&gt; 是 &lt;code&gt;keyword&lt;/code&gt; 的缩写，&lt;code&gt;kwargs&lt;/code&gt; 可以记忆&lt;strong&gt;键值对参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例：计算任意多个数字的和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_nums&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 循环遍历&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; args:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        num &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_nums(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;元组和字典的拆包&#34;&gt;元组和字典的拆包&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在调用带有多值参数的函数时，如果希望&lt;/li&gt;
&lt;li&gt;将一个&lt;strong&gt;元组&lt;/strong&gt;变量，直接传递给 &lt;code&gt;args&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将一个&lt;strong&gt;字典&lt;/strong&gt;变量，直接传递给 &lt;code&gt;kwargs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以使用&lt;strong&gt;拆包&lt;/strong&gt;，简化参数的传递，拆包的方式是：
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;元组&lt;/strong&gt;变量前，增加一个 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;字典&lt;/strong&gt;变量前，增加两个 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54递归&#34;&gt;5.4递归&lt;/h3&gt;
&lt;p&gt;递归：函数调用自身&lt;/p&gt;
&lt;h4 id=&#34;递归的特点&#34;&gt;递归的特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一个函数&lt;strong&gt;内部调用自己&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;函数内部可以调用其他函数，也可以在内部调用自己&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数内部的代码是相同的，只是针对&lt;strong&gt;参数&lt;/strong&gt;不同，&lt;strong&gt;处理的结果不同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;参数满足一个条件&lt;/strong&gt;时，函数不再执行
&lt;ol&gt;
&lt;li&gt;被称为&lt;strong&gt;递归的出口&lt;/strong&gt;，否则会造成死循环&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;案例--计算数字累加&#34;&gt;案例&amp;ndash;计算数字累加&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义一个函数 &lt;code&gt;sum_numbers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能够接受一个 &lt;code&gt;num&lt;/code&gt; 的整体参数&lt;/li&gt;
&lt;li&gt;计算 &lt;code&gt;1 + 2 ... num&lt;/code&gt; 的结果&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_numbers&lt;/span&gt;(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 1. 出口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 2. 数字累加 num + (num - 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 假设 sum_numbers 能处理 1到 num -1 的累加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum_numbers(num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; temp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_numbers(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- http://localhost:1313/posts/python01/ - Tom Almighty</description>
        </item>
    
    
  </channel>
</rss> 